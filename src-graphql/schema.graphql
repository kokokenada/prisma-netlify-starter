### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type CommonResponse {
  errorMessages: [ErrorDetails!]

  """True if request was successful"""
  success: Boolean!
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

enum ErrorCode {
  EMAIL_ADDRESS_INVALID
  NOT_CODED
}

type ErrorDetails {
  errorCode: ErrorCode!
  errorMessage: String
}

type Mutation {
  createOnePost(data: PostCreateInput!): Post!
  createOneUser(data: UserCreateInput!): User!
  deleteOnePost(where: PostWhereUniqueInput!): Post
  deleteOneUser(where: UserWhereUniqueInput!): User
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Post {
  author: User
  id: ID!
}

input PostCreateInput {
  author: UserCreateOneWithoutAuthorInput
  content: String
  createdAt: DateTime
  id: ID
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostCreateManyWithoutPostsInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateWithoutAuthorInput {
  content: String
  createdAt: DateTime
  id: ID
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostWhereInput {
  AND: [PostWhereInput!]
  author: UserWhereInput
  content: NullableStringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  published: BooleanFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  me(email: String!): User!
  post(where: PostWhereUniqueInput!): Post
  posts(after: ID, before: ID, first: Int, last: Int, skip: Int, where: PostWhereInput): [Post!]!
  serverInfo: ServerInfo!
  user(where: UserWhereUniqueInput!): User
  users(after: ID, before: ID, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int): [User!]!
}

type ServerInfo {
  branch: String!
  buildId: String!
  commit: String!
  commonResponse: CommonResponse!
  context: String!
  deployId: String!
  isAdmin: Boolean!
  isLoggedIn: Boolean!
  nodeEnv: String!
  postgresPort: String!
  postgresServer: String!
  postgresServerProd: String!
  testEnvVar: String!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  email: String!
  id: ID!
  posts(after: ID, before: ID, first: Int, last: Int, skip: Int): [Post!]!
}

input UserCreateInput {
  email: String!
  id: ID
  name: String
  posts: PostCreateManyWithoutPostsInput
}

input UserCreateOneWithoutAuthorInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserCreateWithoutPostsInput {
  email: String!
  id: ID
  name: String
}

input UserOrderByInput {
  email: OrderByArg
  id: OrderByArg
  name: OrderByArg
}

input UserWhereInput {
  AND: [UserWhereInput!]
  email: StringFilter
  id: StringFilter
  name: NullableStringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  posts: PostFilter
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
